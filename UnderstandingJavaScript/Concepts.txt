Links Tops:
    https://developer.mozilla.org/pt-BR/

JavaScript is the programming language that runs scripts inside a browser :: in other world it is client side processing!
    That way, you can send functional scripts to the client's machine run, instead of your server.
    You can also use it to perform animations and others interesting things in the browser. 

Name/Value Pair: name that match to a UNIQUE VALUE
    Address = 'Bazinga - 100'

Objects: Collection of Name/Value Pair. (In JS)
    Address:
    {
        Street:'Bazinga',
        Number: 100,
        Apartment:
        {
            Floor: 3,
            Number: 13,
        }
    }

Global Environment: It runs inside a execution context. It is accessible anywhere in the code.
    It creates a global Object
    It creates special variable 'this'.
        Usually, by default in global level its value is window... Windows of the browser

Window: Object that refers to browser window.
    When you are using others frameworks, the window object (global object) is diferent... But, there will be always one.

Global Object: Is created by Global Environment/Executor

Global: something that are not inside a function

Tab: each tab is a separate process, in other words, it is another global indepedent context.

Variables outside a funtion get atached to  the global object

Outer Environment: It is a reference to the oldest execution context. 

Hoisting: First the javascript is separate memory for each var without running by Exercution Context.
    1) Creationg Phase: Global Object, this, Outer Environment, parser recognizes variables and function and set up memory space for them!
        So, this variables and functions already have the vars and function before running it.
        Due the javascript doesnt know how many space it needs for its variables, it just put a placeholder named: undefined;
            All varibles are initially setted  as undefined 
        Funtions are sitting in memory entirely
    2) Running Phase: single threaded, line by line from top to down.
    Bad idea to count on hoisting!!


Placeholder undefined: it is not a string! It is a especial value to refers to it... Not defininig is diferent from not undefined
    You can reference it by keyword undefined to compare things
    DO NOT set something as undefined!

When you run a code it creates de Global Execution Context.. When you call a function, it creates a new execution context just for that function...
    A Stack is created... The new Context atop the older context... It is named Execution Stack
    All the functions is already up in the memory at global execution context creation
    Every execution context has its own variable Environment (scope)
        Each one is dintict, unique and independent from each other;


let: works just like var and is setted up just like var in the creation phase (and so, initially, setted as undefined). However, when let is used, javascript blocks the hoisting.
    declared between blocks... {}... is valid just inside it.
        So, when you use it inside a for, each one is a new variable...
            BLOCK SCOPING

Variable scoping in javascript is done by lexycal scoping.

Javascript has hooks with Rendering Engine and HTTP Requests...

Assincronous: Others codes and engines of Browser running tasks
    We are talking about Rendering Engines, HTTP Requests, events Queue. 
    They are assigned when the Execution Context Stack is finished.

Event Queue: sits inside javascript engine... notifications of events that might be happening.
    The browser Assincronously, puts events in this events Queue

JavaScript uses Dynamic Typing.

There are 5 Primitive Types in JS (even thought you dont choose it directly):
    1. undefined --  variable was created but not assigned
    2. NULL -- variable has no data but has existed
    3. Boolean -- true/false
    4. Strings -- cadeia de chars
    5. Numbers -- always float
    6. Simbols -- They are string that are UNIQUES and avoid overwrite by redeclaration of the property.

Precedence and Associtivity: The Higher, the one that is called first.
    https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Operator_Precedence

Default Values: Each var or has default value when converted to others types (coeecions)

Samaness Compatison: When using === sameness comparison you avoid the coercion and then the type are also compared. This avoids BUGS.

Objects and Functions they are related.

Objects are colection of name-value pairs :: they have and address
    Primitive :: property :: they have one address
        Another child object can be also a property
    Method ::  Funtions connected to an object :: they have address


Computed Member Access Operator: these are the bracket [] ... It creates a reference to something as property
    You can create objects thru strings passed dinamicly
Member Access Operator: Used to access properties and methods of and object: .
    You can create a fixed name to be a property

Shorthand Object : Curly Brace {} is used to create an object;

Funtions in JavaScript are objects
    Primitive
    Object
    Others Functions
    Name: can be anonymous
    Code.. especial propety thar are invocable using ()
        A net execution context is created. (Creationg Phase)
            Variable Environment : news ones
            Outer Environment: lexical envioronment
            'this' is created => a variable. It points to a diferent object dependending on how the function was invoked;
        They also have some "methods" called:
        .bind()
            It binds a function to an object properties... including `this` property
            It also can be used to create a Currying function!
            check FunctionBindCallApply1 and 2 for more details!
        .call()
            It calls a function binding it to some object
        .apply()
        
    You can have a function statement in which just do work and dont return nothing
        You can have a function expression, that return something

By value vs by reference
	BY VALUE: A variable has a memory location.
		se a = 10
		b = a
		b tera um novo local na memoria e o valor de a sera copiado e atribuido
	By Reference: works for all objects. They has a memory location
		se a = new Abject()
		b = a
		b tera a mesma referencia e se eu alterar o a, b vai alterar tambem. nesse caso os valores nao sao copiados e sim as referencias;

THIS keyword.
    this outside any function will appoint to window object.
    inside a function it still will point to window (if simply invoked)
    IF the function is inside an object it will point to the parent object!
        

Arrays: collection of things insider of it = using []
    In JS you can put in a array whatever type you want.

Default arguments can be done using || statement:
    function(name) = {
        name = name||"Esse eh o valor default";
    }


Execution Context is created (function)
    Variable Environment
    'this'
    Outer Environment
    'arguments'
        Array like: acts like array, but it is not.
        You can use arguments to avoid running a function by comparing the value or legnth of the array
        Is getting deprecated.

SPREAD OPERATOR ...NomeVAR: its used in the argumetns to express extra arguments... will be treated as a list

Function Overloading: JS doesnt have any: functions of the same name however with diferent number of parameters (and in some case, difewrent types)
    doesnt work in js because functions are objects
    We can simulate something like that by design patterns


Sintax Parsers: There are a JS engine that parsers your code and turns it into machine code.
    JS parses your code character by character assuming things...

DANGEROUS THINGS:
    Automatic semicolon assertions (;): You dont need to put it, because it usually assumes it for you, HOWEVER, it is dangerous! ALWAYS put ; Dont let JS engine decide to you in your place.
        Mainly if there are a carriage return... \n in which it usually assumes as ;
    

Safe Code IIFE and packages:
    when you call script inside and html things gets only stacked one on another one...
    That makes extremmely easy to mix up variables names and actually break something.
    The trick is, create every script inside an IIFE.
    That way JS creates a new executable context that has a separated scope!
    (funtion(...atr){
        //codes
    })();

Closure: It is an effect of js that happens when a context is created and while in it, some object is created (due some past actions or properties) that context so comes to an end, however its object no.
    But, that object rememenbers some varibles and properties from past contexts!
    That is enclosure
    Example:

    function greetFactory(language){
        language = language || "en";
        return function(firstName,lastName){
            switch(language){
                case "en":
                    console.log(`Hello ${firstName}!`);
                    break;

                case "es":
                    console.log(`Hola ${firstName}`);
                    break;
                default:
                    throw new Error("Language not found!");
                    break;
            }
        }
    }

    Even tho it is not the best factory... It is a good example to explain closure.

    Other good example: look at ClosureAndCallback exercise;


    There are good functional programming practices in https://underscorejs.org/ and https://lodash.com/
        To extends it, you simply add it in the hmtl file using:
            <script src="scriptJs.js"></script>
            when done that way, you simply uses it as the browser will stack one over another.

    Classical Inheritance (Js dont use those) is when an object get access to  the properties and methods of another object (in class terms)
        Very verbose
        Leads to design patterns
        Types:
            public
            private 
            protected
            interface

    Java Script uses Prototypal Inheritance : as evertithing on JS is an object... everything has an "proto"!
        Flexible
        Extensible
        Easy to understand

        All Object has a "Proto" property in which references another object
            Proto is an object an could stand by its own
                As proto is an obj, it has its own "proto" property... and so on
                    It generates a "prototype chain"
            
        So, prototype inheritance is when an "proto" property points to another obj
        The object __proto__ (Dont ever use this way) should point to its SUPERCLASS
            'this' will point to the subclass!
            Even tho you shouldnt use __proto__ directly for performance purposes, there is a demonstration in "inheritance1"
        A "proto" object of a pattern object will have its builtins methods and properties... as a "proto" function pattern object will have those too!
    
    Reflection and Extend in prototypal inheritance
        Reflection is when an object looks upon itself.
        One way to use inheritance in JS is using instead of "__proto__"  the _.extendOwn from underscorejs library
            It uses reflection to increase its object properties and methods without using __proto__ in which is unperforming
        Look for an example in "ReflectionExtensionInheritance"
        The best way for doing it is using  "const subOBJ =  _.extend(new Object(), superOBJ)"
            After that, specialize what is needed.

    Classes in JS:
        Operator 'new' creates a new empty object and atributes it to next function or class.
            In case of a function just look after 'class1' in exercises.
                'this' is used because you are invoking a function to create a new obj
                'this' refers to the object created by 'new'
                it runs that way if you dont return anything otherwise wont work
                This is called >>>> Function Constructor!!! <<<<
            
            A prototype of a Function Constructor (when u use 'new') IS NOT the prototype of THE FUNCTION
                In other words:  .__proto__ != .prototype in a function
            Every object created by Function Constructor has its .protoype pointing to same properties and methods!
                In other words when you get a FunctionConstructor.prototype.getX()... even the objects that was already been created will have these properties and methods.
                    You will access it by .getX in the object!
            Always put your methods in .prototype!
                It will save space and permit quick method add to your class.
                Check out in "Class2" e exercise
            If you forgot to use 'new' JS will simply run the things inside it and return `undefined`...
                It might cause problem in your code... an it is hard to see!
                A convention that you might want to use is:
                    - Normal functions use a itIsAFuntion
                    - A class use a ItIsAFuntion (first letter capital)
        Built-ins Function Constructors:
            - Number ... it is not an integer or a primitive type ... it is diferent with diferent methods!
            - String ... it is not a simple integer (primitive)... it is an object where each "index" is a property with lots diferents methods
            - Date...
            - Array
            Be aware when using built in and treating them as primitive later... Because they are not primitives!
        You could also use Pure Prototypal Inheritance using "Object.create(__superObject__)": check out in "PureInheritance" exercise
            The fact is... when you use "Object.create()" internally it uses __proto__
            It is new. In case browser dont suport, use a polyfill.
        In ES6 it is possible to create a literal Class and its constructor... It is shown in "Class3"
            Literal Class still is an OBJECT!!!!!!!!!!!! (...)
            To extend it use... 'extends'
                needs constructor
                    super() optional to call parent constructor


    Polyfill: add a feature to the browser...

    Usefull Function Constructor for date (better than builtin Date): MomentJs
        https://momentjs.com/

    Array in JS:
        It is an object!
        They dont have and index... they actually have a name!!! A property name. It is a pair key-value
            That s why you use [] for it.
            It is a property name that mixes up as indexes..
        It generates a problem... As it returns it props and methods, when you create a new method using .prototype it will polute all your arrays!
            That is why it is better to simply use:
            "for(let i=0; i < arr.length ; i++){
                arr[i] = ...
            }"
        That is why there are "Push"/"Pop" method and not "Add"/"Delete".. Because deleting and adding it is as simple as adding and deleting a property of an object
            Be carefull when doing it, tho.
    

    Strict Mode:
        Put in the first line of your code // or in the first line of your function: 
            "use strict";
        Prevents misstyping
        Flags all the files if used in one interelly

    Learning More Using GitHub:
        Go to GitHub>> Explore>> Frontend JavaScript Frameworks
        https://jquery.com/
            Development version comes with comments

    Typescript --> It is a JS that have types... it transpile to a JS code.
        https://www.typescriptlang.org/

    Traceur ---> Transpile JS new features to a Polyfill!
        https://github.com/google/traceur-compiler


    ES6 features
        https://github.com/lukehoban/es6features

    Promise: An aproach introduced in ES6 to deal with  asynchronous events and callbacks
        Promises are just an standardized object and/or aproach
        Represents a future values...
        async functions is executed unitil get to "await" ... (a promise)
            then, this function sit there untill promise is resolved.
	The .then() method takes up to two arguments; the first argument is a callback function for the fulfilled case of the promise, and the second argument is a callback function for the rejected case. 
