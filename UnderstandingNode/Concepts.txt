NODE TOOLS!
    EVENTS
    STREAMS
    ASSYNC

Majority of its concepts comes from JavaScript


Abstraction Levels (classical):
   | Machine language
   | Assembly language
   | C/C++
   | JavaScript | Node
   v Softwares

NODE IS WRITTEN IN C++
    V8 --> Node's Core is WRITTEN in C++
        V8 can be embeeded and extended using more C++ code, to extend even more the JavaScript capability
            Node is an V8 embeeded in which was extended.


Node Js is a server technology: using JS to create a server code.
    Server: a computer performing services
    Client requests to server
        In the client side: JavaScript is complemented using others modules from BROWSER
    To install it...
        1. Install NVM
        2. Install NPM
        3. Using NVM : install node
    https://nodejs.org/en
    
Modules: They shouldnt interfere in your code, so it will run once in other context and no other function will be exported.. 
    To export, use: "module.exports"... module.export RETURNS THAT THING Through the require!
        To look for details, you should look for "Module.js"... you can access it using debugger.
            By default when you use a path... it assumes it is ".js"
            Enside "require" is puts all JS file inside an IIFE function, separating its context.
                "module.exports" is what "require(path)" returns 
    When the exact path to file.js doesnt exist, it will look for a FOLDER with that same name!
        If it finds it: it will look for an "index.js" inside it and run!
            It is usefull for creating big modules and organize things
                It is also great to mention that inside "index.js" you can "require" the other files or folders.
        It is also possible to import an entire object just by require("obj.json") it.
            when require sees and JavaScript Object JSON, it returns it in module.exports automaticly
        Check it ou in "Modules2"
    "exports" points to the same object as "module.exports", however, it is not made for this return!
        You can mutate it, or in other words: add methods and properties, and it will work just as "module.exports"
            To avoid problems: JUST USE module.exports :)

Module Patterns in Node:
    1. module.exports = function(){};
    2. module.exports.anythingHere = function(){}; 
        When returned you will look for .anythingHere();
        It is the same object, in case of requiring more than once
        another way on doing it is by:
            module.exports = {
                anythingHere: function(){}; 
            }
    3. module.exports = new FunctionConstructorHere();
        Even tho it requires should return a new one, NODE caches that object and passes the same reference! 
        It includes cross files!
    4. module.exports = FunctionConstructorHere;
        In that case it will return the constructor and you will need to referenciate a new one using "new" when using it.. However, it will generate a new object of tha class.
    5. ES6 brought a new way of doing it!
        "export function anyName() {}" in the module, file
        "import * as varName from './path';" in the consumer!
    
Some essential modules - builtins - that comes with node:
    To import those just "require('itsName');"
        https://nodejs.org/api/
            "util"
                util.log()
                util.format()
                checkout "Modules3"
    
WEB SERVER checklist 
    - Needs to reuse code : components
    - Way to deal with files
    - Way to deal with databases
    - Communicate over internet by itself
        - req/res : correctly
    - Works that takes long time - long live

Event: Something that has happened in our app and we can respond to
    Types:
        System Events:
            That comes from Operation System (internet and external sources)
                C++ Core
                    libuv
                        https://libuv.org/
                        Event Loop always checking Queue
                            It has a Queue inside it
                        OS puts events in this QUEUE
                        libuv callsbacks because it is alive: JavaScript Events!!
        Custom Events --> From JavaScript
            Comes from JavaScript Library: you create by yourself
                Event Emitter:
                    Where custom events lives
            JavaScript simulates an event... it doesnt really have and Event Objects

    Event Emmiter... It is a handler of functions.
        It is used for "Event Driven Architecture"
            Functions are 'emmited' in FIFO.
        A "justLike code" was made in "Emmiter1" and "Emmiter2" uses the nodeJs api 
            https://nodejs.dev/pt/learn/the-nodejs-event-emitter/
        An event Listenner is a code that runs to respond to an event.
        A type is just a String or a Symbol :  beware of magic Strings... instead use as "Emmiter3"
            "Emmiter3" creates a module that exports an object that works as an ENUMM!
    Event Driven Non-Blocking I/O in V8 JavaScript

Inheritance in modules using 'util'
    check it up in 'inherits1'
    You can use .call() as constructor of a Function constructor
        Check the "Inherits1", "Call&Apply", "Inherits2", "Inherits3", "Inherits4" and "Inherits5".
            "One is complemented by another"__
            
JavaScript is not good on encoding: usually a buffer is used for it.

File and fs "node" module.
    check it up the exercise "file1" and "file2"

Assync in Node:
    V8 pass thru the app.js and run things single threaded... when it encounter something assync, it asks SO or external source.
    Node runs an event Loop that keeps looking in a queue.. an event queue for external sources of action / SO.
        When it finds something it puts it in V8 queue that as soons as it finishes one context: start another!
            V8 has just one instance and it is single threaded, however, libuv is not, so: it creates lots of events and puts is in queue.
                The event loop is single threaded but the othres executions contexts is not!

Node like STREAMS and CHUNKS! Because it helps it on beeing performant:
    To avoid memory consumption explosion, node works with STREAM:
        Stream is the usage of pieces of data none as CHUNK.
        Stream are event Emmiters
        Types of streams (abstract class -- from node perspective):
            Readable
            Writable
            Duplex
            Transform
            Passthough
        There is examples: "File3", "File4", "File5"
            https://nodejs.org/api/stream.html


http_parser:
    Written in C
        gets http requests and responses, break them apart and treat them up!


http builtin module:
    Every event from http receives two params: req, res
        req: request
        res: response (it is a STREAM )

NPM: "Node Package Manager" the largest ecossystem of open source code 

Dependencies :  code that another set of code depends on to work properly

Semantic Versioning (SemVer): Specifing what version or set of code this is... and what it implements or changes.
    vLL.MM.SS
        The idea is: just looking at the version number: having an idea what has happened 
        LL : MAJOR CHANGES --> Big changes! Your code probably face problems with compatibility.
        MM : MINOR CHANGES --> Features added. Your code will probably be fine
        SS : PATCH --> Bug fixes. Your code will work fine
    https://semver.org/

NPM Registry: npm comes with Node JS 
    https://www.npmjs.com/
    codes installed via npm comes from the link above
    "npm install <package>:<version> --save" --> ":<version" is optional... so is "--save"
        this way it will e installed as a "NEED" package in packege.json
    Every package has its own dependencies that has its own dependencies.
        So, modules might be duplicated inside application


NPM usefull Commands:
    https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally
    "npm init" --> It starts Node, NPM, application and modules
        brings you "package.json"
    "npm install <package> --save"
        When something is installed a new folder is created: "node_modules"
        package.json will be updated... "dependencies" will appear and there will be the package name and its versions inside it
            In version if you see...:  "^Something.Something.Something"... this "^" mean that the next time you reinstal the modules: Node can update the version automatically maintaining the major changes version.
                "^XX.XX.XX" --> node can update minor changes and patch changes, but not major changes
            It also might be "~Something.Something.Something" and it will update only the Patch changes
            Without any symbol, node will always maintain that specific version for you.
    "npm install <package> --save-dev" a package is installed as dev dependencies.
        "devDependencies" will be appear in your package.json
    "npm install -g <package>" --> Install a package in ALL of node JS applications
        nodemon is usually installed globally
    "npm install" --> npm will look the "package.json" and following the rules: reinstall all the packages and modules.
    "npm update" --> Update all the packages following the package.json rules


Usefull Modules from NPM:
    --> "moment": usefull to work with date and time!
    --> "jasmine-node": used for creating node automated tests 
        Usually used on development only.
    --> "nodemon": keeps rebooting your node application to quick look and quick test It
        Usually used on development only. However, installed globally
            It is because nodemon should be called by SO
                "nodemon <file.js>"
    --> "express": it is a web server framework. It so much more complete than just http!
        Routing is well implemented, optimized
        Placeholder is well implemented, optimized