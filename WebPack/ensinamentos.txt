https://www.youtube.com/watch?v=hJ7Rg1821Q0&t=1s
https://www.youtube.com/watch?v=fp9eVtkQ4EA


To analise the internet efects on development, you can go to "Network" on Inpect tab and change to "Speed 3G".
On images the first and mainly things you should do is: TO CHANGE THE SIZE OF IMAGE DOWNLOADED BASED ON VIEWPORT.
The second UX thing you can do is to: instead of load an entire image, you can just download a must lighert blurry version, and so when finished downloading, that blurry image will be changed to the original one.
The final thing you can do is: loading JUST what you can see first and loading the rest just as demanded in a process called "lazy loading"

How to implement LAZY LOAD IN HTML:
 - In the tag image use the property named 'loading="lazy"'... The default is the 'loading="eager"'
 - To work properly, all the lazy images should have width and height html property (because the browser needs to know its size)


How to implement BLUR-LOAD in HTML:
  - Put all images inside a of a div, and put a class in that div that:
    + Adds using CSS background-image a SMALLER VERSION of your original image that covers (background-size : cover and background-position: center) all the original space 
    + The tag img should have object-position to center and object-fit to cover 
    ! To generate that image you can use any tool necessary 
    ! To hide the image untill it has completely downloaded you can use JS:
            const blurDivs = document.querySelectorAll(".blur-load");
            blurDivs.forEach(div =>{
                const img = div.querySelector("img");
                function loaded(){
                    div.classList.add("loaded")
                }
                if (img.complete){
                    loaded();
                }else{
                    img.addEventListener("load",loaded)
                }
            });
        ==> Then you need to add a CSS class named:
            .blur-load > img {
                opacity: 0;
                transition: opacity 200ms easy-in-out
            }
            .blur-load.loaded > img{
                opacity:1;
            }

    + You can add an animation to show the user that the image is loading:
        using sudo elements ::before or ::after
            sudo elements is elements that require a content and is set right before or after you original class or element.
        
        You can use .blur-load::before {
            content:"";
            position: absolute;
            inset:0;
            animation: pulse 2.5s infinite;
        }

        .blur-load{
            //add with others:
            position: relative;
        }
        //to create an animation function
        @keyframes pulse{
            0%{
                background-color: rgba(255,255,255,0);
            }
            50%{
                background-color: rgba(255,255,255,0.1);
            }
            100%{
                background-color: rgba(255,255,255,0);
            }
        }

        //and after loaded remove that ::before
        .blur-load.loaded::before {
            content:none;
        }

Observação de um bro:
    Caso clientes com js sejam importantes. Voce sempre tem que pensar neles.
    Para isso voce não precisa ficar se fodendo no <noscript>...
        Voce pode simplesmente adicionar os efeitos especiais pelo js!
            Dessa forma no pior dos casos, se o cliente desabilitar o js, ele fica com a pagina sem os efeitos extras, mas pelo menos entende.

A ideia nessa atividade:

1) JS que interrompe o aparecimento da imagem grande (e depois devolve quando 100% carregada)
2) JS que coloca a animação de carregamento daora.
3) Adicionar Lazy Loading
4) Aumentar a UX com uma thumb super leve que carrega pelo CSS.

Então no pior dos casos:

O cliente vai ficar sem uma animação de carregamento e a imagem vai aparecer aos poucos de cima para baixo... Mas ela aparece!


### Responsive Images:

Existe uma propriedade nas imagens chamado "srcset="URL1 200w, URL2 700w, URL3 1600w"" ==> Nesse caso ele vai usar cada URL e escolher automaticamente entre as opcoes aquelas que nao vao atrapalhar a legibilidade da pagina
Ele sempre vai tentar te dar a menor imagem possivel sem que a diferença de qualidade seja perceptivel
'sizes="100vw"' é um atributo usado para re-referenciar a imagem no viewport ao verdadeiro tamanho em que ela esta usando do viewport

Para melhorar a qualidade da UX em caso de imagens completamente distintas: voce pode usar a tag picture...
    Mas nesse caso voce vai aumentar a UX a custo de PERFORMANCE